{"ast":null,"code":"var _jsxFileName = \"C:\\\\FashionMuse\\\\frontend\\\\src\\\\pages\\\\ChatBotPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n/**\r\n * This component displays a bubble-based chat interface.\r\n * It calls your Flask ChatGPT endpoint at /chat.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatbotPage() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  // Send user message + fetch AI reply\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    // Add user's message to the chat\n    setMessages(prev => [...prev, {\n      text: input,\n      user: true\n    }]);\n\n    // Call Flask backend at /chat\n    try {\n      const res = await fetch(\"http://127.0.0.1:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await res.json();\n\n      // Add AI's reply to the chat\n      setMessages(prev => [...prev, {\n        text: data.reply,\n        user: false\n      }]);\n    } catch (error) {\n      // In case of error, show an error message from AI\n      setMessages(prev => [...prev, {\n        text: \"Error contacting AI\",\n        user: false\n      }]);\n    }\n\n    // Clear input\n    setInput(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI-Powered Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-bubble ${msg.user ? 'user-bubble' : ''}`,\n        children: msg.text\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatbotPage, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = ChatbotPage;\nexport default ChatbotPage;\nvar _c;\n$RefreshReg$(_c, \"ChatbotPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatbotPage","_s","messages","setMessages","input","setInput","sendMessage","trim","prev","text","user","res","fetch","method","headers","body","JSON","stringify","message","data","json","reply","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","i","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/FashionMuse/frontend/src/pages/ChatBotPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n/**\r\n * This component displays a bubble-based chat interface.\r\n * It calls your Flask ChatGPT endpoint at /chat.\r\n */\r\nfunction ChatbotPage() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  // Send user message + fetch AI reply\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    // Add user's message to the chat\r\n    setMessages((prev) => [...prev, { text: input, user: true }]);\r\n\r\n    // Call Flask backend at /chat\r\n    try {\r\n      const res = await fetch(\"http://127.0.0.1:5000/chat\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ message: input })\r\n      });\r\n      const data = await res.json();\r\n\r\n      // Add AI's reply to the chat\r\n      setMessages((prev) => [...prev, { text: data.reply, user: false }]);\r\n    } catch (error) {\r\n      // In case of error, show an error message from AI\r\n      setMessages((prev) => [...prev, { text: \"Error contacting AI\", user: false }]);\r\n    }\r\n\r\n    // Clear input\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <h2>AI-Powered Chatbot</h2>\r\n\r\n      {/* The bubble-based chat area */}\r\n      <div className=\"chat-container\">\r\n        {messages.map((msg, i) => (\r\n          <div\r\n            key={i}\r\n            className={`chat-bubble ${msg.user ? 'user-bubble' : ''}`}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Input row */}\r\n      <div className=\"chat-input-row\">\r\n        <input\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatbotPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}